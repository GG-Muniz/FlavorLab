Get JWT token expiration test passing reliably
Users API tests green (preferences, profile, change password)
Auth API tests green (register, login, invalid tokens)
Entities API tests green (list, search, CRUD, connections)
Models tests green (Entity, RelationshipEntity, User)
Services tests green (SearchService, others)
Fix init_db tests: wrap raw SQL with sqlalchemy.text and align DataMigrator API/validation
Remove deprecations: replace from_orm and utcnow in users API
-----

What we have:
Codebase findings
Strengths:
Clear FastAPI modular layout: app/api, app/models, app/services, app/schemas.
SQLAlchemy setup is consistent; all models share Base from app/database.py.
Pydantic v2 migration mostly complete (use of ConfigDict(from_attributes=True), field_validator, pattern).
Auth: bcrypt hashing, JWT issuance with UTC-aware exp.
Tests: Comprehensive coverage across API, services, models, and scripts with solid fixtures.
Issues to address next:
Auth API suite intermittently failing login success case when tests use a different password literal than fixtures; ensure tests consistently use TestPassword123 or the fixture password.
Entities/Relationships API and model tests pending; verify relationships import/use in tests (a NameError was noted previously for RelationshipEntity in cascade test).
init_db tests: some direct SQL queries use raw strings; must use sqlalchemy.text(...) for execution; also align DataMigrator.validate_migration() with test expectations (tests expect a structured report vs current simple counts).
Deprecations: replace remaining from_orm and occurrences of datetime.utcnow():
users stats endpoint (datetime.utcnow()), and from_orm returns in users.py for get-by-id.
JSON querying: already adapted to SQLite using cast(..., String).like(...); keep consistent.

DONE!!!